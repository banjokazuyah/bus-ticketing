const express=require("express"),router=express.Router(),auth=require("../middleware/auth"),Ticket=require("../models/ticket"),Location=require("../models/location"),{sendTicketInfo:sendTicketInfo,sendPaymentUpdateInfo:sendPaymentUpdateInfo}=require("../emails/nodemailer");router.post("/api/admin/tickets/create",async(e,t)=>{const s=new Ticket({...e.body});try{const r=await Location.findLocations(e.body.pickup,e.body.destination);r&&(await s.save(),sendTicketInfo(s),t.status(200).send({ticket:s,message:"Ticket created successfully"}))}catch(e){t.status(400).send({status:"error occurred",message:e.message}||"Error occurred")}}),router.get("/api/admin/tickets/getAllTickets",auth,async(e,t)=>{const s={},r={};if(e.query.status&&(s.status="true"===e.query.status),e.query.sortBy){const t=e.query.sortBy.split(":");t[0],r[t[0]]="desc"===t[1]?-1:1}else r.date=-1;try{const e=await Ticket.find(s).sort(r);t.status(200).send({status:"Success",data:e})}catch(e){return t.status(400).send({status:"error occurred",message:e.message}||"Error occurred")}}),router.patch("/api/admin/tickets/:id",auth,async(e,t)=>{const s=Object.keys(e.body),r=["status","cust_email"],a=s.every(e=>r.includes(e));if(!a)return t.status(400).send({error:"Invalid operation",message:"Update is not permitted"});const o=e.params.id;try{const r=await Ticket.findOne({ticket_id:o});if(!r)return t.status(404).send({error:"ticket not found"});s.forEach(t=>{r[t]=e.body[t]}),await r.save(),r.status&&sendPaymentUpdateInfo(r),t.send(r)}catch(e){t.status(400).send({error:"Error occurred",message:e.message})}}),module.exports=router;