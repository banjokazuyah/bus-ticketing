const express=require("express"),router=express.Router(),auth=require("../middleware/auth"),Trip=require("../models/trip"),Location=require("../models/location"),Ticket=require("../models/ticket");router.post("/api/admin/trips/create",auth,async(t,e)=>{const s=new Trip({...t.body,owner:t.admin._id});try{const r=await Location.findLocations(t.body.pickup,t.body.destination),a=await Trip.checkDuplicateRoute(t.body.pickup,t.body.destination);r&&a&&(await s.save(),e.status(200).send({trip:s,message:"Trip saved successfully"}))}catch(t){e.status(400).send({status:"error occurred",message:t.message}||"Error occurred")}}),router.post("/api/admin/trips/getTrip",async(t,e)=>{try{const s=await Trip.findOne({pickup:t.body.pickup,destination:t.body.destination});if(!s)return e.status(404).send({status:"error",message:"Route does not exist"});const r=new Date;r.setHours(0,0,0,0);const a=new Date;a.setHours(23,59,59,999);const i=await Ticket.find({pickup:t.body.pickup,destination:t.body.destination,status:!1,date:{$gte:r.toISOString(),$lt:a.toISOString()}}),o=i.reduce((t,e)=>t+parseInt(e.seats),0);e.status(200).send({status:"Success",data:{trips:s,seats_booked:o}})}catch(t){return e.status(400).send({status:"error occurred",message:t.message}||"Error occurred")}}),router.get("/api/admin/trips/getAllTrips",auth,async(t,e)=>{const s={},r={};if(t.query.active&&(s.active="true"===t.query.active),t.query.sortBy){const e=t.query.sortBy.split(":");r[e[0]]="desc"===e[1]?-1:1}try{const t=await Trip.find(s);e.status(200).send({status:"Success",data:t})}catch(t){return e.status(400).send({status:"error occurred",message:t.message}||"Error occurred")}}),router.patch("/api/admin/trips/:id",auth,async(t,e)=>{const s=Object.keys(t.body),r=["distance","price","time","active"],a=s.every(t=>r.includes(t));if(!a)return e.status(400).send({error:"Invalid operation"});const i=t.params.id;try{const r=await Trip.findOne({_id:i});if(!r)return e.status(404).send({error:"trip not found"});s.forEach(e=>{r[e]=t.body[e]}),await r.save(),e.send(r)}catch(t){e.status(400).send({error:"Error occurred"})}}),router.delete("/api/admin/trips/:id",auth,async(t,e)=>{const s=t.params.id;try{const t=await Trip.findOneAndDelete({_id:s});if(!t)return e.status(404).send({status:"Error"});e.send({message:"Deleted Successfully"})}catch(t){e.status(500).send()}}),module.exports=router;